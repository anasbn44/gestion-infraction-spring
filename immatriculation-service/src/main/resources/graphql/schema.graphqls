type Query{
    prorietaires: [ProprietaireResponseDto],
    proprietaireById(id: Float) : ProprietaireResponseDto,
    vehicules : [Vehicule],
    vehiculesById(id : Float) : Vehicule,
    getVehiculeByMatricule(matricule : String) : VehiculeResponse,
    getProprietaireOfVehicule(id : Float) : ProprietaireResponseDto
}

type Mutation{
    saveVehicule(vehicule :VehiculeRequest): Vehicule,
    updateVehicule(id: Float, vehicule :VehiculeRequest) : Vehicule,
    deleteVehicule(id: Float) : Vehicule,
    saveProprietaire(proprietaire :ProprietaireRequest): ProprietaireResponseDto,
    updateProprietaire(id: Float, proprietaire :ProprietaireRequest) : ProprietaireResponseDto,
    deleteProprietaire(id: Float) : ProprietaireResponseDto
}

type Proprietaire {
    id : Float,
    nom : String,
    dateDeNaissance :  Float,
    email : String
    vehicules : [Vehicule]
}

type ProprietaireResponseDto{
    id : Float,
    nom : String,
    dateDeNaissance :  Float,
    email : String
}

type Vehicule{
    id : Float,
    modele : Int
    matricule : String,
    marque : String,
    puissanceFiscale : Int,
    proprietaire :Proprietaire
}

type VehiculeResponse{
    id : Float,
    modele : Int
    matricule : String,
    marque : String,
    puissanceFiscale : Int
}

input VehiculeRequest{
    modele : Int
    matricule : String,
    marque : String,
    puissanceFiscale : Int,
}

input  ProprietaireRequest{
    nom : String,
    dateDeNaissance :  Float,
    email : String
}
